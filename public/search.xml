<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Hexo用法]]></title>
    <url>%2F2017%2F05%2F24%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Java多线程Thread,Runnable, Callable和线程池(一)]]></title>
    <url>%2F2017%2F05%2F24%2FJava-hread-pool-001%2F</url>
    <content type="text"><![CDATA[这一篇主要关注于我们自己实现和管理多线程，后面会介绍使用线程池实现多线程。Java里面实现多线程有三种方式,继承 Thead类，或者实现Runnable和Callable&lt;&gt;接口。下面详细介绍一下这三种实现方式。 1. Thread实现多线程使用Thread实现，我们只需要继承Thread类，重写(overwirte)run方法。12345678910111213141516171819202122232425262728class ThreadDemo extends Thread &#123; private String threadFlag; private long sleepTime = 100; public ThreadDemo(String threadFlag) &#123; System.out.println("Construct " + threadFlag); this.threadFlag = threadFlag; &#125; public ThreadDemo(String threadFlag, long sleepTime) &#123; System.out.println("Construct " + threadFlag); this.threadFlag = threadFlag; this.sleepTime = sleepTime; &#125; //重写run方法 public void run() &#123; System.out.println("Running before: " + this.threadFlag); try &#123; for (int i = 0; i &lt; 6; i++) &#123; System.out.println(this.threadFlag + i); Thread.sleep(this.sleepTime); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("Running after:" + this.threadFlag); &#125;&#125; ThreadDemo类继承自Thread类,重写了Thread类的run()方法。当ThreadDemo调用start()方法的时候，run()方法会被调用。下面是测试方法：123456789101112131415public class ConcurrentThread &#123; public static void main(String[] args) throws InterruptedException, ExecutionException &#123; long start = System.currentTimeMillis(); Thread tA = new ThreadDemo("Thread-A"); tA.start(); Thread tB = new ThreadDemo("Thread-B"); tB.start(); long end = System.currentTimeMillis(); System.out.println("During time: " + (end - start)); &#125;&#125; 测试方法里面创建了两个线程tA,tB，下面是执行的结果，可以看到tA和tB是没有先后顺序的，是两个独立的线程。“During Time:2”是主线程里面的语句，但是它在tA和tB没有执行完成的时候，已经开始执行。说明这两个线程并没有阻塞主线程。 2. Runnable实现多线程另外一种实现多线程的方法是implement Runnable接口12345678910111213141516171819202122232425262728293031class RunnableImpl implements Runnable &#123; private String threadFlag; private long sleepTime = 100; public RunnableImpl(String threadFlag) &#123; System.out.println("Construct " + threadFlag); this.threadFlag = threadFlag; &#125; public RunnableImpl(String threadFlag, long sleepTime) &#123; System.out.println("Construct " + threadFlag); this.threadFlag = threadFlag; this.sleepTime = sleepTime; &#125; @Override public void run() &#123; System.out.println("Running before: " + this.threadFlag); try &#123; for (int i = 0; i &lt; 6; i++) &#123; System.out.println(this.threadFlag + i); Thread.sleep(this.sleepTime); &#125; &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; System.out.println("Running after:" + this.threadFlag); &#125;&#125; RunnableImpl类实现了Runnable接口，实现了run()方法，是用start的方法去启动改线程。下面是测试方法和结果：1234567891011121314public class ConcurrentThread &#123; public static void main(String[] args) throws InterruptedException, ExecutionException &#123; long start = System.currentTimeMillis(); Thread tA = new Thread(new RunnableImpl("Thread-A")); tA.start(); Thread tB = new Thread(new RunnableImpl("Thread-B", 400)); tB.start(); long end = System.currentTimeMillis(); System.out.println("During time: " + (end - start)); &#125;&#125; 使用RunnableImpl和Thread去创建两个线程tA和tB，从结果中看到tA和tB也是并发执行的，他们是随机的获取CPU的执行时间。“During time:4”在两个线程没有执行完成的时候已经输出了。说明这两个线程也没有阻塞主线程。 3. Callable&lt;&gt;实现多线程观察Thread和Runnable实现的线程，你会发现这两种实现，你是无法知道线程的执行状态的，例如：线程是否执行完成了，线程有没有被cancel等等。如果你需要基于线程的状态做些事情，就需要很多而外的工作。为了解决这些问题，Callable&lt;&gt;就应运而生了，它和FutureTask结合可以很好的解决这个问题。FutureTask一般有两个用途。1.获取异步的结果和取消任务。 高并发的情况下确保任务只会执行一次。1234567891011121314151617181920212223242526272829import java.util.concurrent.Callable;import java.util.concurrent.ExecutionException;import java.util.concurrent.FutureTask;class CallableDemo implements Callable&lt;String&gt; &#123; private String threadFlag; private long sleepTime = 400; public CallableDemo(String threadFlag) &#123; System.out.println("Construct " + threadFlag); this.threadFlag = threadFlag; &#125; public CallableDemo(String threadFlag, long sleepTime) &#123; System.out.println("Construct " + threadFlag); this.threadFlag = threadFlag; this.sleepTime = sleepTime; &#125; @Override public String call() throws Exception &#123; System.out.println("Running before: " + this.threadFlag); Thread.sleep(this.sleepTime); System.out.println("Running after:" + this.threadFlag); return this.threadFlag + " success in this time"; &#125;&#125; 这里CallableImpl实现了Callable接口，实现了里面的call()方法，这个接口是泛型化的接口，接口的类型就是call()方法的返回值类型。下面是测试代码： 12345678910111213141516171819public class ConcurrentThread &#123; public static void main(String[] args) throws InterruptedException, ExecutionException &#123; long start = System.currentTimeMillis(); FutureTask&lt;String&gt; futureA = new FutureTask&lt;String&gt;(new CallableDemo("Thread-A", 5000)); Thread tA = new Thread(futureA); tA.start(); System.out.println("Thread is Done: " + futureA.isDone()); System.out.println(futureA.get()); System.out.println("Thread is Done: " + futureA.isDone()); FutureTask&lt;String&gt; futureB = new FutureTask&lt;String&gt;(new CallableDemo("Thread-B", 400)); Thread tB = new Thread(futureB); tB.start(); long end = System.currentTimeMillis(); System.out.println("During time: " + (end - start)); &#125;&#125; 这里也是实现了两个线程tA和tB,和上面Thread和Runnable的不同之处在于，这里使用futureA和futureB来获取两个线程的执行状态。futureA.isDone()。这两需要着重说的是futureA.get().这个方法的意思是：主线程等待tA执行完成。这个方法是会阻塞主线程的运行。下面是测试结果:可以看到被标记的就是返回值，这是通过get()方法得到的，主线程会成tA执行完成之后，才会继续向下执行，而tB没有调用futureB.get(),所以tB没有阻塞主线程，和主线程是并发的。可以看到‘During time: 5003’在tB没有执行完成的时候已经被执行。 4. 总结这篇主要介绍了自己实现多线程的三种方式: extends Thread,重写run()方法 implements Runnable， 实现run()方法 implements Callable&lt;&gt;，实现call()方法，可以获取线程的执行状态信息，isDone(),isCancelled() 下一篇我们会介绍，线程并发时候的共享资源问题。]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[心情小记]]></title>
    <url>%2F2017%2F05%2F22%2F%E5%BF%83%E6%83%85%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[心情小记1今天读了得到之后，看到了一句话，要成为别人最需要的人。因为需求决定价格。]]></content>
      <categories>
        <category>日常小记</category>
      </categories>
      <tags>
        <tag>心情</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
</search>